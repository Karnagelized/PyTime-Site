# Generated by Django 5.1.7 on 2025-07-12 10:48

import django.contrib.auth.models
import django.contrib.auth.validators
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='HardSkills',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('isVisible', models.BooleanField(default=True, verbose_name='Видимость')),
                ('dateCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
            ],
            options={
                'verbose_name': 'Скилл',
                'verbose_name_plural': 'Скиллы',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('datetimeCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetimeUpdate', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
            ],
            options={
                'verbose_name': 'Тег',
                'verbose_name_plural': 'Теги',
            },
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'Пользователь',
                'verbose_name_plural': 'Пользователи',
                'db_table': 'custom_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='HardSkillsCategory',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Название')),
                ('position', models.PositiveSmallIntegerField(default=0, verbose_name='Позиция')),
                ('isVisible', models.BooleanField(default=True, verbose_name='Видимость')),
                ('dateCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('skills', models.ManyToManyField(blank=True, to='core.hardskills')),
            ],
            options={
                'verbose_name': 'Категория скилла',
                'verbose_name_plural': 'Категории скиллов',
            },
        ),
        migrations.CreateModel(
            name='Project',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('shortTitle', models.CharField(max_length=50, verbose_name='Краткий заголовок')),
                ('description', models.CharField(blank=True, max_length=300, verbose_name='Описание')),
                ('text', models.TextField(verbose_name='Текст')),
                ('image', models.ImageField(blank=True, upload_to='uploads/%Y/%m/%d/', verbose_name='Изображение')),
                ('datetimeCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetimeUpdate', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('isPublished', models.BooleanField(default=True, verbose_name='Видимость')),
                ('tags', models.ManyToManyField(blank=True, related_name='projectTags', to='core.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Проект',
                'verbose_name_plural': 'Проекты',
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('slug', models.SlugField(unique=True, verbose_name='Слаг')),
                ('title', models.CharField(max_length=200, verbose_name='Заголовок')),
                ('shortTitle', models.CharField(max_length=50, verbose_name='Краткий заголовок')),
                ('description', models.CharField(blank=True, max_length=300, verbose_name='Описание')),
                ('text', models.TextField(verbose_name='Текст')),
                ('image', models.ImageField(blank=True, upload_to='uploads/%Y/%m/%d/', verbose_name='Изображение')),
                ('datetimeCreate', models.DateTimeField(auto_now_add=True, verbose_name='Дата создания')),
                ('datetimeUpdate', models.DateTimeField(auto_now=True, verbose_name='Дата изменения')),
                ('isPublished', models.BooleanField(default=True, verbose_name='Видимость')),
                ('tags', models.ManyToManyField(blank=True, related_name='articleTags', to='core.tag', verbose_name='Теги')),
            ],
            options={
                'verbose_name': 'Статья',
                'verbose_name_plural': 'Статьи',
            },
        ),
    ]
